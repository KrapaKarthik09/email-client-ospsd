[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "email-client-ospsd"
version = "0.1.0"
description = "A comprehensive email client with Gmail implementation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Karthik Krapa", email = "karthik.krapa@nyu.edu"}
]
requires-python = ">=3.11"
dependencies = [
    "google-auth==2.23.4",
    "google-auth-oauthlib==1.1.0",
    "google-auth-httplib2==0.1.1",
    "google-api-python-client==2.108.0",
    "python-dotenv==1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-cov==4.1.0",
    "pytest-asyncio==0.21.1",
    "mypy==1.7.1",
    "ruff==0.1.7",
    "pre-commit==3.5.0",
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
    "mkdocs-autorefs==0.5.0",
    "mkdocstrings==0.24.0",
    "mkdocstrings-python==1.7.5",
    "coverage==7.3.2",
    "types-requests==2.31.0.10",
]

[project.urls]
Homepage = "https://github.com/kkrapa/email-client-ospsd"
Repository = "https://github.com/kkrapa/email-client-ospsd"
Issues = "https://github.com/kkrapa/email-client-ospsd/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "E",    # Error
    "EM",   # flake8-errmsg
    "F",    # Pyflakes
    "FBT",  # flake8-boolean-trap
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "N",    # pep8-naming
    "PLC",  # Pylint
    "PLE",  # Pylint
    "PLR",  # Pylint
    "PLW",  # Pylint
    "Q",    # flake8-quotes
    "RUF",  # Ruff-specific
    "S",    # flake8-bandit
    "T",    # flake8-debugger
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # Warning
    "YTT",  # flake8-2020
]
ignore = [
    # Carefully considered ignores with justifications
    "PLR0913",  # Too many arguments - sometimes necessary for comprehensive APIs
    "E501",     # Line too long - handled by formatter and sometimes necessary for readability

    # Type annotation related
    "ANN101",   # Missing type annotation for `self` - redundant as self is always the class instance
    "ANN401",   # Dynamically typed expressions - acceptable in specific scenarios

    # Python compatibility related
    "UP007",    # Use `X | Y` for type annotations - keeping compatibility with older Python versions
    "UP006",    # Use `dict` instead of `Dict` - keeping compatibility with older Python versions
    "UP035",    # `typing.*` is deprecated - keeping compatibility with older Python versions

    # Docstring incompatibilities
    "D211",     # No blank line before class docstring - conflicts with D203 which we prefer
    "D213",     # Multi-line docstring summary start at second line - project uses first line (D212)
    "D406",     # Section name should end with newline - our docstrings use a different format

    # Exception handling
    "TRY003",   # Avoid specifying long messages outside the exception class - acceptable for user-facing errors
    "EM101",    # Exception must not use a string literal - acceptable for simple errors
    "EM102",    # Exception must not use an f-string literal - needed for dynamic error messages
    "TRY301",   # Abstract `raise` to inner function - overcomplicates simple error handling
    "TRY300",   # Statement should be in else block - current flow is more readable
    "TRY400",   # Use logging.exception - we prefer explicit error logging in some cases
    "TRY401",   # Redundant exception object in logging.exception - acceptable for clarity

    # TODO comment style
    "TD002",    # Missing author in TODO - anonymous TODO is project convention
    "TD003",    # Missing issue link - anonymous TODO is project convention
    "FIX002",   # Line contains TODO - known task for future implementation

    # Import structure
    "E402",     # Module level import not at top of file - sometimes needed for path manipulation
]

[tool.ruff.per-file-ignores]
# Example file - allowed to use print for demonstration
"example_usage.py" = [
    "T201",     # `print` found - allowed for demonstration purposes
    "F401",     # Imported but unused - keeping imports for example clarity
    "W291",     # Trailing whitespace - acceptable in example
    "W292",     # No newline at end of file - acceptable in example
    "W293",     # Blank line contains whitespace - acceptable in example
    "Q000",     # Single quotes found but double quotes preferred - acceptable in example
]

# Test-specific ignores - more relaxed rules for test code
"tests/**/*" = [
    "S101",     # Use of assert - fundamental for test assertions
    "PLR2004",  # Magic value in comparison - acceptable in tests
    "ARG002",   # Unused arguments - needed for interface testing
    "FBT001",   # Boolean positional arg - acceptable in tests
    "FBT002",   # Boolean default arg - acceptable in tests
    "S106",     # Hardcoded password in arg - test data only
    "S107",     # Hardcoded password default - test data only
    "ANN401",   # Any type - acceptable in tests
    "D401",     # First line of docstring should be imperative - acceptable in tests
    "PT027",    # Use pytest.raises - acceptable when using unittest style
    "S105",     # Hardcoded password - test data only
    "W291",     # Trailing whitespace - acceptable in tests
    "W293",     # Blank line contains whitespace - acceptable in tests
    "F841",     # Local variable assigned but never used - acceptable in tests
    "COM812",   # Trailing comma missing - acceptable in tests
    "Q000",     # Single quotes found but double quotes preferred - acceptable in tests
    "ARG005",   # Unused argument - acceptable in mocks
    "N803",     # Argument name should be lowercase - acceptable in mocks
    "F821",     # Undefined name - will be fixed with imports
]

# Internal test directories
"**/tests/**/*" = [
    "S101",     # Use of assert - fundamental for test assertions
    "PLR2004",  # Magic value in comparison - acceptable in tests
    "ARG002",   # Unused arguments - needed for interface testing
    "FBT001",   # Boolean positional arg - acceptable in tests
    "FBT002",   # Boolean default arg - acceptable in tests
    "S106",     # Hardcoded password in arg - test data only
    "S107",     # Hardcoded password default - test data only
    "ANN401",   # Any type - acceptable in tests
    "D401",     # First line of docstring should be imperative - acceptable in tests
    "PT027",    # Use pytest.raises - acceptable when using unittest style
    "S105",     # Hardcoded password - test data only
    "W291",     # Trailing whitespace - acceptable in tests
    "W293",     # Blank line contains whitespace - acceptable in tests
    "F841",     # Local variable assigned but never used - acceptable in tests
    "COM812",   # Trailing comma missing - acceptable in tests
    "Q000",     # Single quotes found but double quotes preferred - acceptable in tests
    "ARG005",   # Unused argument - acceptable in mocks
    "N803",     # Argument name should be lowercase - acceptable in mocks
    "F821",     # Undefined name - will be fixed with imports
    "I001",     # Import block is unsorted - acceptable in tests
    "F401",     # Imported but unused - may be needed for tests
]

# Gmail client implementation - specific exceptions
"src/gmail_client_impl/__init__.py" = [
    "E402",     # Module level import not at top - needed for local import structure
    "S107",     # Hardcoded password default - standard practice for this parameter
    "F401",     # os imported but unused - needed for path manipulation
    "F841",     # Local variable assigned but never used - acceptable in exception handlers
    "UP017",    # Use datetime.UTC alias - maintaining backward compatibility
]

# Email client API - specific exceptions for interface design
"src/email_client_api/__init__.py" = [
    "FBT001",   # Boolean positional arg - required for the EmailMessage interface design
    "FBT002",   # Boolean default arg - required for the EmailMessage interface design
    "UP028",    # Replace yield over for loop with yield from - keeping more explicit form
    "W293",     # Blank line contains whitespace - acceptable in this file
]

[tool.ruff.isort]
known-first-party = ["email_client_api", "gmail_client_impl", "email_analytics"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "googleapiclient.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "google_auth_oauthlib.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests", "src"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
